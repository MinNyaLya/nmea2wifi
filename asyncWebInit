#include "ESPAsyncTCP.h"
#include "ESPAsyncWebServer.h"

AsyncWebServer server(80);
AsyncWebSocket ws("/ws"); // access at ws://[esp ip]/ws
AsyncEventSource events("/events"); // event source (Server-Sent events)

const char* ssid = "your-ssid";
const char* password = "your-pass";
const char* http_username = "admin";
const char* http_password = "admin";

//flag to use from web update to reboot the ESP
bool shouldReboot = false;

void onRequest(AsyncWebServerRequest *request){
	//Handle Unknown Request
	request->send(404);
}

void onBody(AsyncWebServerRequest *request, uint8_t *data, size_t len, size_t index, size_t total){
	//Handle body
}

void onUpload(AsyncWebServerRequest *request, String filename, size_t index, uint8_t *data, size_t len, bool final){
	//Handle upload
}

void onEvent(AsyncWebSocket * server, AsyncWebSocketClient * client, AwsEventType type, void * arg, uint8_t *data, size_t len){
	//Handle WebSocket event
}


/*
*
*
*/
void AsyncWebInit() {

	// attach AsyncWebSocket
	ws.onEvent(onEvent);
	server.addHandler(&ws);

	// attach AsyncEventSource
	server.addHandler(&events);

	// upload a file to /upload
	server.on("/upload", HTTP_POST, [](AsyncWebServerRequest *request){
		request->send(200);
	}, onUpload);

	// send a file when /index is requested
	server.on("/index", HTTP_ANY, [](AsyncWebServerRequest *request){
		request->send(SPIFFS, "/index.htm");
	});

	// HTTP basic authentication
	server.on("/login", HTTP_GET, [](AsyncWebServerRequest *request){
		if(!request->authenticate(http_username, http_password))
				return request->requestAuthentication();
		request->send(200, "text/plain", "Login Success!");
	});

	// Simple Firmware Update Form
	server.on("/update", HTTP_GET, [](AsyncWebServerRequest *request){
		request->send(200, "text/html", "<form method='POST' action='/update' enctype='multipart/form-data'><input type='file' name='update'><input type='submit' value='Update'></form>");
	});
	server.on("/update", HTTP_POST, [](AsyncWebServerRequest *request){
		shouldReboot = !Update.hasError();
		AsyncWebServerResponse *response = request->beginResponse(200, "text/plain", shouldReboot?"OK":"FAIL");
		response->addHeader("Connection", "close");
		request->send(response);
	},[](AsyncWebServerRequest *request, String filename, size_t index, uint8_t *data, size_t len, bool final){
		if(!index){
			Serial.printf("Update Start: %s\n", filename.c_str());
			Update.runAsync(true);
			if(!Update.begin((ESP.getFreeSketchSpace() - 0x1000) & 0xFFFFF000)){
				Update.printError(Serial);
			}
		}
		if(!Update.hasError()){
			if(Update.write(data, len) != len){
				Update.printError(Serial);
			}
		}
		if(final){
			if(Update.end(true)){
				Serial.printf("Update Success: %uB\n", index+len);
			} else {
				Update.printError(Serial);
			}
		}
	});

	// attach filesystem root at URL /fs
	server.serveStatic("/fs", SPIFFS, "/");

	// Catch-All Handlers
	// Any request that can not find a Handler that canHandle it
	// ends in the callbacks below.
	server.onNotFound(onRequest);
	server.onFileUpload(onUpload);
	server.onRequestBody(onBody);

	server.begin();
}
