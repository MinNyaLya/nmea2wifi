<!DOCTYPE html>
<html lang="en">
	<head>
		<title>NMEA2WIFI</title>
		<!-- Required meta tags -->
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
		<link href="bootstrap.min.css.gz" rel="stylesheet">
	<script type="text/javascript">

	var jsonArray = new Array();

	var myLineChart;

		function parseLogfile(logFile){
			var position = 0;
			var strStart = 0;
			var strEnd = 0;
			var logFileEnd = logFile.lastIndexOf("}");

			while(strEnd < logFileEnd){
				strStart = logFile.indexOf("{",position);       // Find start of json string
				strEnd = logFile.indexOf("}",strStart);         // Find end of json string
				if(strEnd)position = strEnd;                    // start search for the next string here

				jsonArray.push ( JSON.parse( logFile.substring( strStart, strEnd+1 ) ) );
			}
			//showValues();
		};

		function loadValues(){
			var xh = new XMLHttpRequest();
			xh.onreadystatechange = function(){
				if (xh.readyState == 4){
					if(xh.status == 200) {
						parseLogfile(xh.responseText);
					} 
				}
			};
			xh.open("GET", "/nmea.log", true);
			xh.send(null);
		};

		function showValues(){
				var div_id = document.getElementById("log");

				jsonArray.forEach(function (item, index, arr) {
					div_id.innerHTML += item.gpstime + " " + item.millis + " " + item.speed + "<br>";
					addData(myLineChart, item.millis, item.speed);
				});
		};

		 x = setInterval(function(){ 
				if(jsonArray.length){
					clearInterval(x);
					initChart();
					showValues();
					myLineChart.update();
				}
		}, 100);


		function initChart(){
				var ctx = document.getElementById("myChart").getContext('2d');
				myLineChart = new Chart(ctx, {
						type: 'line',
						data: {
						labels: [],
						datasets: [{
							label: 'Speed',
							data: [],
							backgroundColor: [
									'rgba(255, 99, 132, 0.2)',
									'rgba(54, 162, 235, 0.2)',
									'rgba(255, 206, 86, 0.2)',
									'rgba(75, 192, 192, 0.2)',
									'rgba(153, 102, 255, 0.2)',
									'rgba(255, 159, 64, 0.2)'
							],
							borderColor: [
									'rgba(255,99,132,1)',
									'rgba(54, 162, 235, 1)',
									'rgba(255, 206, 86, 1)',
									'rgba(75, 192, 192, 1)',
									'rgba(153, 102, 255, 1)',
									'rgba(255, 159, 64, 1)'
							],
							borderWidth: 1
						}]
						},
						options: {
							scales: {
									yAxes: [{
											ticks: {
													beginAtZero:true
											}
									}]
							}
		}
				});
		};


function addData(mychart, newlabel, newdata) {
		mychart.data.labels.push(newlabel);
		mychart.data.datasets.forEach((dataset) => {
				dataset.data.push(newdata);
		});
		mychart.update();
}


</script>
	</head>
	<body>
		<!-- Optional JavaScript -->
		<!-- jQuery first, then Popper.js, then Bootstrap JS -->
		<script type="text/javascript" src="jquery-3.2.1.min.js.gz"></script>
		<script type="text/javascript" src="popper.min.js.gz"></script>
		<script type="text/javascript" src="bootstrap.min.js.gz"></script>
		<script type="text/javascript" src="chart.bundle.min.js.gz"></script>

<nav class="navbar navbar-expand-lg navbar-dark bg-primary">
	<a class="navbar-brand" href="#">nmes2wifi</a>
	<button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
		<span class="navbar-toggler-icon"></span>
	</button>
	<div class="collapse navbar-collapse" id="navbarNav">
		<ul class="navbar-nav">
			<li class="nav-item active">
				<a class="nav-link" href="/chart.htm">Graphs <span class="sr-only">(current)</span></a>
			</li>
			<li class="nav-item">
				<a class="nav-link" href="/nmea.log">Logs</a>
			</li>
			<li class="nav-item">
				<a class="nav-link" href="/config.htm">Settings</a>
			</li>
			<li class="nav-item">
				<a class="nav-link" href="/api">Stats</a>
			</li>
			<li class="nav-item">
				<a class="nav-link disabled" data-toggle="modal" data-target="#ResetModal" href="/reset">Reset</a>
			</li>
		</ul>
	</div>
</nav>
<!-- Reset Modal -->
<div class="modal fade" id="ResetModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog" role="document">
	<div class="modal-content">
	  <div class="modal-header">
		<h5 class="modal-title" id="exampleModalLabel">Are you sure?</h5>
		<button type="button" class="close" data-dismiss="modal" aria-label="Close">
		  <span aria-hidden="true">&times;</span>
		</button>
	  </div>
	  <div class="modal-body">
		Reset the device means it will loose all wifi settings, and possible all saved data
	  </div>
	  <div class="modal-footer">
		<button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
		<button type="button" class="btn btn-primary">Reset</button>
	  </div>
	</div>
  </div>
</div>
</div>

<div class="container">
<h1>Chart</h1>
<canvas id="myChart" width="400" height="100"></canvas>

</div>

<script>

var ctx = document.getElementById("myChart").getContext('2d');
var myChart = new Chart(ctx, {
	type: 'line',
	data: {
		labels: ["Red", "Blue", "Yellow", "Green", "Purple", "Orange"],
		datasets: [{
			label: 'Speed in knots',
			data: [12, 19, 3, 5, 2, 3],
			backgroundColor: [
				'rgba(255, 99, 132, 0.2)',
				'rgba(54, 162, 235, 0.2)',
				'rgba(255, 206, 86, 0.2)',
				'rgba(75, 192, 192, 0.2)',
				'rgba(153, 102, 255, 0.2)',
				'rgba(255, 159, 64, 0.2)'
			],
			borderColor: [
				'rgba(255,99,132,1)',
				'rgba(54, 162, 235, 1)',
				'rgba(255, 206, 86, 1)',
				'rgba(75, 192, 192, 1)',
				'rgba(153, 102, 255, 1)',
				'rgba(255, 159, 64, 1)'
			],
			borderWidth: 1
		}]
	},
	options: {
		scales: {
			yAxes: [{
				ticks: {
					beginAtZero:true
				}
			}]
		}
	}
});

var connection = new WebSocket('localhost:81/', ['arduino']);
connection.onopen = function () {
	connection.send('Message from Browser to ESP8266 yay its Working!! ' + new Date()); 
	connection.send('ping');
	
/*	setInterval(function() {
		connection.send('Time: ' + new Date()); 
	}, 20);
*/
connection.send('Time: ' + new Date()); 
};
connection.onerror = function (error) {
	console.log('WebSocket Error ', error);
};
connection.onmessage = function (e) {
	console.log('Server: ', e.data);
	connection.send('Time: ' + new Date()); 
};
</script>

	</body>
</html>